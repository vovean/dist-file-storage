// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: protoc/fms.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	FileManagementService_InitFileUploadV1_FullMethodName       = "/dist_file_storage.FileManagementService/InitFileUploadV1"
	FileManagementService_ReportUploadProgressV1_FullMethodName = "/dist_file_storage.FileManagementService/ReportUploadProgressV1"
	FileManagementService_CancelUploadV1_FullMethodName         = "/dist_file_storage.FileManagementService/CancelUploadV1"
	FileManagementService_GetFileDownloadInfoV1_FullMethodName  = "/dist_file_storage.FileManagementService/GetFileDownloadInfoV1"
)

// FileManagementServiceClient is the client API for FileManagementService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileManagementServiceClient interface {
	InitFileUploadV1(ctx context.Context, in *InitFileUploadV1Request, opts ...grpc.CallOption) (*InitFileUploadV1Response, error)
	ReportUploadProgressV1(ctx context.Context, in *ReportUploadProgressV1Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	CancelUploadV1(ctx context.Context, in *CancelUploadV1Request, opts ...grpc.CallOption) (*emptypb.Empty, error)
	GetFileDownloadInfoV1(ctx context.Context, in *GetFileDownloadInfoV1Request, opts ...grpc.CallOption) (*GetFileDownloadInfoV1Response, error)
}

type fileManagementServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileManagementServiceClient(cc grpc.ClientConnInterface) FileManagementServiceClient {
	return &fileManagementServiceClient{cc}
}

func (c *fileManagementServiceClient) InitFileUploadV1(ctx context.Context, in *InitFileUploadV1Request, opts ...grpc.CallOption) (*InitFileUploadV1Response, error) {
	out := new(InitFileUploadV1Response)
	err := c.cc.Invoke(ctx, FileManagementService_InitFileUploadV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagementServiceClient) ReportUploadProgressV1(ctx context.Context, in *ReportUploadProgressV1Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FileManagementService_ReportUploadProgressV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagementServiceClient) CancelUploadV1(ctx context.Context, in *CancelUploadV1Request, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, FileManagementService_CancelUploadV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fileManagementServiceClient) GetFileDownloadInfoV1(ctx context.Context, in *GetFileDownloadInfoV1Request, opts ...grpc.CallOption) (*GetFileDownloadInfoV1Response, error) {
	out := new(GetFileDownloadInfoV1Response)
	err := c.cc.Invoke(ctx, FileManagementService_GetFileDownloadInfoV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileManagementServiceServer is the server API for FileManagementService service.
// All implementations should embed UnimplementedFileManagementServiceServer
// for forward compatibility
type FileManagementServiceServer interface {
	InitFileUploadV1(context.Context, *InitFileUploadV1Request) (*InitFileUploadV1Response, error)
	ReportUploadProgressV1(context.Context, *ReportUploadProgressV1Request) (*emptypb.Empty, error)
	CancelUploadV1(context.Context, *CancelUploadV1Request) (*emptypb.Empty, error)
	GetFileDownloadInfoV1(context.Context, *GetFileDownloadInfoV1Request) (*GetFileDownloadInfoV1Response, error)
}

// UnimplementedFileManagementServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFileManagementServiceServer struct {
}

func (UnimplementedFileManagementServiceServer) InitFileUploadV1(context.Context, *InitFileUploadV1Request) (*InitFileUploadV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InitFileUploadV1 not implemented")
}
func (UnimplementedFileManagementServiceServer) ReportUploadProgressV1(context.Context, *ReportUploadProgressV1Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ReportUploadProgressV1 not implemented")
}
func (UnimplementedFileManagementServiceServer) CancelUploadV1(context.Context, *CancelUploadV1Request) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CancelUploadV1 not implemented")
}
func (UnimplementedFileManagementServiceServer) GetFileDownloadInfoV1(context.Context, *GetFileDownloadInfoV1Request) (*GetFileDownloadInfoV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetFileDownloadInfoV1 not implemented")
}

// UnsafeFileManagementServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileManagementServiceServer will
// result in compilation errors.
type UnsafeFileManagementServiceServer interface {
	mustEmbedUnimplementedFileManagementServiceServer()
}

func RegisterFileManagementServiceServer(s grpc.ServiceRegistrar, srv FileManagementServiceServer) {
	s.RegisterService(&FileManagementService_ServiceDesc, srv)
}

func _FileManagementService_InitFileUploadV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InitFileUploadV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagementServiceServer).InitFileUploadV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileManagementService_InitFileUploadV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagementServiceServer).InitFileUploadV1(ctx, req.(*InitFileUploadV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagementService_ReportUploadProgressV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReportUploadProgressV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagementServiceServer).ReportUploadProgressV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileManagementService_ReportUploadProgressV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagementServiceServer).ReportUploadProgressV1(ctx, req.(*ReportUploadProgressV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagementService_CancelUploadV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CancelUploadV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagementServiceServer).CancelUploadV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileManagementService_CancelUploadV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagementServiceServer).CancelUploadV1(ctx, req.(*CancelUploadV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _FileManagementService_GetFileDownloadInfoV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetFileDownloadInfoV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagementServiceServer).GetFileDownloadInfoV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileManagementService_GetFileDownloadInfoV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagementServiceServer).GetFileDownloadInfoV1(ctx, req.(*GetFileDownloadInfoV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// FileManagementService_ServiceDesc is the grpc.ServiceDesc for FileManagementService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileManagementService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dist_file_storage.FileManagementService",
	HandlerType: (*FileManagementServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InitFileUploadV1",
			Handler:    _FileManagementService_InitFileUploadV1_Handler,
		},
		{
			MethodName: "ReportUploadProgressV1",
			Handler:    _FileManagementService_ReportUploadProgressV1_Handler,
		},
		{
			MethodName: "CancelUploadV1",
			Handler:    _FileManagementService_CancelUploadV1_Handler,
		},
		{
			MethodName: "GetFileDownloadInfoV1",
			Handler:    _FileManagementService_GetFileDownloadInfoV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protoc/fms.proto",
}

const (
	FileManagementAdminService_AddStorageV1_FullMethodName = "/dist_file_storage.FileManagementAdminService/AddStorageV1"
)

// FileManagementAdminServiceClient is the client API for FileManagementAdminService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FileManagementAdminServiceClient interface {
	AddStorageV1(ctx context.Context, in *AddStorageV1Request, opts ...grpc.CallOption) (*AddStorageV1Response, error)
}

type fileManagementAdminServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFileManagementAdminServiceClient(cc grpc.ClientConnInterface) FileManagementAdminServiceClient {
	return &fileManagementAdminServiceClient{cc}
}

func (c *fileManagementAdminServiceClient) AddStorageV1(ctx context.Context, in *AddStorageV1Request, opts ...grpc.CallOption) (*AddStorageV1Response, error) {
	out := new(AddStorageV1Response)
	err := c.cc.Invoke(ctx, FileManagementAdminService_AddStorageV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FileManagementAdminServiceServer is the server API for FileManagementAdminService service.
// All implementations should embed UnimplementedFileManagementAdminServiceServer
// for forward compatibility
type FileManagementAdminServiceServer interface {
	AddStorageV1(context.Context, *AddStorageV1Request) (*AddStorageV1Response, error)
}

// UnimplementedFileManagementAdminServiceServer should be embedded to have forward compatible implementations.
type UnimplementedFileManagementAdminServiceServer struct {
}

func (UnimplementedFileManagementAdminServiceServer) AddStorageV1(context.Context, *AddStorageV1Request) (*AddStorageV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddStorageV1 not implemented")
}

// UnsafeFileManagementAdminServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FileManagementAdminServiceServer will
// result in compilation errors.
type UnsafeFileManagementAdminServiceServer interface {
	mustEmbedUnimplementedFileManagementAdminServiceServer()
}

func RegisterFileManagementAdminServiceServer(s grpc.ServiceRegistrar, srv FileManagementAdminServiceServer) {
	s.RegisterService(&FileManagementAdminService_ServiceDesc, srv)
}

func _FileManagementAdminService_AddStorageV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(AddStorageV1Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FileManagementAdminServiceServer).AddStorageV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: FileManagementAdminService_AddStorageV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FileManagementAdminServiceServer).AddStorageV1(ctx, req.(*AddStorageV1Request))
	}
	return interceptor(ctx, in, info, handler)
}

// FileManagementAdminService_ServiceDesc is the grpc.ServiceDesc for FileManagementAdminService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FileManagementAdminService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dist_file_storage.FileManagementAdminService",
	HandlerType: (*FileManagementAdminServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddStorageV1",
			Handler:    _FileManagementAdminService_AddStorageV1_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protoc/fms.proto",
}
