// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.3.0
// - protoc             (unknown)
// source: protoc/storage.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

const (
	StorageService_StoreV1_FullMethodName = "/dist_file_storage.StorageService/StoreV1"
	StorageService_ServeV1_FullMethodName = "/dist_file_storage.StorageService/ServeV1"
	StorageService_InfoV1_FullMethodName  = "/dist_file_storage.StorageService/InfoV1"
)

// StorageServiceClient is the client API for StorageService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type StorageServiceClient interface {
	StoreV1(ctx context.Context, opts ...grpc.CallOption) (StorageService_StoreV1Client, error)
	ServeV1(ctx context.Context, in *ServeV1Request, opts ...grpc.CallOption) (StorageService_ServeV1Client, error)
	InfoV1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InfoV1Response, error)
}

type storageServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewStorageServiceClient(cc grpc.ClientConnInterface) StorageServiceClient {
	return &storageServiceClient{cc}
}

func (c *storageServiceClient) StoreV1(ctx context.Context, opts ...grpc.CallOption) (StorageService_StoreV1Client, error) {
	stream, err := c.cc.NewStream(ctx, &StorageService_ServiceDesc.Streams[0], StorageService_StoreV1_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &storageServiceStoreV1Client{stream}
	return x, nil
}

type StorageService_StoreV1Client interface {
	Send(*StoreV1Request) error
	CloseAndRecv() (*emptypb.Empty, error)
	grpc.ClientStream
}

type storageServiceStoreV1Client struct {
	grpc.ClientStream
}

func (x *storageServiceStoreV1Client) Send(m *StoreV1Request) error {
	return x.ClientStream.SendMsg(m)
}

func (x *storageServiceStoreV1Client) CloseAndRecv() (*emptypb.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(emptypb.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageServiceClient) ServeV1(ctx context.Context, in *ServeV1Request, opts ...grpc.CallOption) (StorageService_ServeV1Client, error) {
	stream, err := c.cc.NewStream(ctx, &StorageService_ServiceDesc.Streams[1], StorageService_ServeV1_FullMethodName, opts...)
	if err != nil {
		return nil, err
	}
	x := &storageServiceServeV1Client{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type StorageService_ServeV1Client interface {
	Recv() (*ServeV1Response, error)
	grpc.ClientStream
}

type storageServiceServeV1Client struct {
	grpc.ClientStream
}

func (x *storageServiceServeV1Client) Recv() (*ServeV1Response, error) {
	m := new(ServeV1Response)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *storageServiceClient) InfoV1(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*InfoV1Response, error) {
	out := new(InfoV1Response)
	err := c.cc.Invoke(ctx, StorageService_InfoV1_FullMethodName, in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// StorageServiceServer is the server API for StorageService service.
// All implementations should embed UnimplementedStorageServiceServer
// for forward compatibility
type StorageServiceServer interface {
	StoreV1(StorageService_StoreV1Server) error
	ServeV1(*ServeV1Request, StorageService_ServeV1Server) error
	InfoV1(context.Context, *emptypb.Empty) (*InfoV1Response, error)
}

// UnimplementedStorageServiceServer should be embedded to have forward compatible implementations.
type UnimplementedStorageServiceServer struct {
}

func (UnimplementedStorageServiceServer) StoreV1(StorageService_StoreV1Server) error {
	return status.Errorf(codes.Unimplemented, "method StoreV1 not implemented")
}
func (UnimplementedStorageServiceServer) ServeV1(*ServeV1Request, StorageService_ServeV1Server) error {
	return status.Errorf(codes.Unimplemented, "method ServeV1 not implemented")
}
func (UnimplementedStorageServiceServer) InfoV1(context.Context, *emptypb.Empty) (*InfoV1Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method InfoV1 not implemented")
}

// UnsafeStorageServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to StorageServiceServer will
// result in compilation errors.
type UnsafeStorageServiceServer interface {
	mustEmbedUnimplementedStorageServiceServer()
}

func RegisterStorageServiceServer(s grpc.ServiceRegistrar, srv StorageServiceServer) {
	s.RegisterService(&StorageService_ServiceDesc, srv)
}

func _StorageService_StoreV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(StorageServiceServer).StoreV1(&storageServiceStoreV1Server{stream})
}

type StorageService_StoreV1Server interface {
	SendAndClose(*emptypb.Empty) error
	Recv() (*StoreV1Request, error)
	grpc.ServerStream
}

type storageServiceStoreV1Server struct {
	grpc.ServerStream
}

func (x *storageServiceStoreV1Server) SendAndClose(m *emptypb.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *storageServiceStoreV1Server) Recv() (*StoreV1Request, error) {
	m := new(StoreV1Request)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _StorageService_ServeV1_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ServeV1Request)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(StorageServiceServer).ServeV1(m, &storageServiceServeV1Server{stream})
}

type StorageService_ServeV1Server interface {
	Send(*ServeV1Response) error
	grpc.ServerStream
}

type storageServiceServeV1Server struct {
	grpc.ServerStream
}

func (x *storageServiceServeV1Server) Send(m *ServeV1Response) error {
	return x.ServerStream.SendMsg(m)
}

func _StorageService_InfoV1_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(StorageServiceServer).InfoV1(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: StorageService_InfoV1_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(StorageServiceServer).InfoV1(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

// StorageService_ServiceDesc is the grpc.ServiceDesc for StorageService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var StorageService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "dist_file_storage.StorageService",
	HandlerType: (*StorageServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "InfoV1",
			Handler:    _StorageService_InfoV1_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StoreV1",
			Handler:       _StorageService_StoreV1_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "ServeV1",
			Handler:       _StorageService_ServeV1_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "protoc/storage.proto",
}
