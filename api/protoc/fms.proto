syntax = "proto3";

package dist_file_storage;

import "google/protobuf/empty.proto";

option go_package = ".;api";

service FileManagementService {
  rpc InitFileUploadV1 (InitFileUploadV1Request) returns (InitFileUploadV1Response);

  rpc ReportUploadProgressV1 (ReportUploadProgressV1Request) returns (google.protobuf.Empty);

  rpc CancelUploadV1 (CancelUploadV1Request) returns (google.protobuf.Empty);

  rpc GetFileDownloadInfoV1 (GetFileDownloadInfoV1Request) returns (GetFileDownloadInfoV1Response);
}

message InitFileUploadV1Request {
  string filename = 1; // в рамках тестового задания используем имя файла как уникальный идентификатор
  uint64 size = 2;
}

message FilePart {
  // используем id, чтоб не делать неявную завязку на порядок частей в списке fileParts
  // также, по partId нужно сортировать части файла при разбиении и сборке файла из частей
  int32 partId = 1;
  string storage = 2; // ссылка на сервис B_n, куда сохранить эту часть
  uint64 size = 3;
  string path = 4; // по какому пути на сервере-хранилище сохранить
}

message InitFileUploadV1Response {
  repeated FilePart fileParts = 1;
}

message ReportUploadProgressV1Request {
  string filename = 1;
  int32 partId = 2;
}

message GetFileDownloadInfoV1Request {
  string filename = 1;
}

message GetFileDownloadInfoV1Response {
  repeated FilePart fileParts = 2;
}

message CancelUploadV1Request {
  string filename = 1;
}

service FileManagementAdminService {
  rpc AddStorageV1 (AddStorageV1Request) returns (AddStorageV1Response);
}

message AddStorageV1Request {
  string addr = 1;
}

message AddStorageV1Response {
  int32 id = 1;
}